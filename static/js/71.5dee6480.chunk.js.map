{"version":3,"file":"static/js/71.5dee6480.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","components/ContactListItem/ContactListItem.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/AddContactForm/AddContactForm.js","components/SearchFilter/SearchFilter.js","pages/Contacts.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ListItem, Button } from '@chakra-ui/react';\n\nconst ContactListItem = ({contact}) => {\n    const dispatch = useDispatch();\n\n    return (\n        <ListItem padding='10px' key={contact.id} >\n            {contact.name}: {contact.number}\n            <Button marginLeft='20px' colorScheme='purple' value={contact.name} onClick={() => dispatch(deleteContact(contact.id))} >Delete</Button>\n        </ListItem>\n    )\n}\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n    contact: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired\n    }).isRequired\n}","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilterValue } from 'redux/contacts/selectors'\nimport { UnorderedList } from '@chakra-ui/react';\n\nconst ContactList = () => {\n\n    const contacts = useSelector(selectContacts);\n    const searchValue = useSelector(selectFilterValue);\n\n    return (\n        <>\n            <h2>Your contactlist</h2>\n            <UnorderedList>\n                {contacts && contacts\n                .filter((el) => el.name.toLowerCase().includes(searchValue.toLowerCase())) \n                .map(contact => {\n                    return (\n                        <ContactListItem key={contact.id} contact={contact} />\n                    )\n                })}\n            </UnorderedList>\n        </>\n    )\n}\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport shortid from 'shortid';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Box, Button, Input, FormLabel } from '@chakra-ui/react';\n\n\nexport default function AddContactForm() {\n\n    const dispatch = useDispatch();\n    const stateContacts = useSelector(selectContacts);\n    const nameInputId = shortid.generate();\n    const numberInputId = shortid.generate();\n    const [ contactName, setName] = useState('');\n    const [ contactNumber, setNumber] = useState('');\n\n    const handleChange = e => {\n        const {name, value} = e.target;\n        switch(name) {\n            case 'name' :\n                setName(value);\n                break;\n\n            case 'number' :\n                setNumber(value);\n                break;\n\n            default: return;\n        }\n    }\n\n    const handleOnSubmit = e => {\n        e.preventDefault();\n\n        let isExist = stateContacts.find(contact => contactName === contact.name);\n        if (isExist) {\n            alert(contactName + \" is allready in contacts\");\n            return\n        };\n\n        dispatch(addContact({\n            name: contactName,\n            number: contactNumber\n        }));\n        reset();  \n    }\n\n    const reset = () => {\n        setNumber('');\n        setName('');\n    }\n\n    return (\n        <form onSubmit={handleOnSubmit}  autoComplete='off'>\n            <Box maxW='md' borderWidth='1px' borderRadius='lg' padding='20px'>\n                \n                <FormLabel htmlFor={ nameInputId } >\n                    Name\n                <Input\n                    type=\"text\"\n                    name=\"name\"\n                    value={contactName}\n                    onChange={handleChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    id={ nameInputId }\n                    \n                />\n                </FormLabel>\n                <FormLabel htmlFor={ numberInputId }>\n                    Number\n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    value={contactNumber}\n                    onChange={handleChange}\n                    pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    id={numberInputId}\n                    \n                />\n                </FormLabel>\n                <Button marginTop='20px' colorScheme='blue' size='lg' type='submit'>Add contact</Button>\n            </Box>\n        </form>\n    )\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filterSlice'\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { Box, Input, FormLabel } from '@chakra-ui/react';\n\n\nconst SearchFilter = () => {\n    let dispatch = useDispatch();\n    const searchValue = useSelector(selectFilterValue);\n\n    const handleChange = e => {\n        const { value } = e.target;\n        dispatch(filterContacts(value));\n    }\n    \n    return (\n        <Box maxW='md' borderWidth='1px' borderRadius='lg' padding='20px 10px 20px 20px' marginTop='30px'>\n            <FormLabel>\n                Find contact by name\n                <Input type=\"text\" value={searchValue} onChange={handleChange} placeholder=\"Search...\" />\n            </FormLabel>\n        </Box>\n    )\n}\n\nexport default SearchFilter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList/ContactList';\nimport AddContactForm from 'components/AddContactForm/AddContactForm';\nimport SearchFilter from 'components/SearchFilter/SearchFilter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div style={{display:'flex', marginTop:'50px'}}>{isLoading ? 'Request in progress...' :\n        <>\n          <div>\n            <AddContactForm />\n            <SearchFilter />\n          </div>\n          <div style={{paddingLeft:'40px'}}>\n            <ContactList />\n          </div>\n        </>\n      }</div>\n    </>\n  );\n}\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["createContext","errorMessage","ListStylesProvider","useListStyles","List","props","forwardRef","styles","children","styleType","useMultiStyleConfig","omitThemingProps","stylePosition","spacing","rest","validChildren","selector","spacingStyle","Children","filter","child","isValidElement","getValidChildren","value","ul","name","listStyleType","chakra","role","__css","container","displayName","OrderedList","as","UnorderedList","ListItem","li","ListIcon","Icon","contact","dispatch","useDispatch","padding","number","marginLeft","colorScheme","onClick","deleteContact","id","selectContacts","state","contacts","items","selectFilterValue","selectIsLoading","isLoading","useSelector","searchValue","el","toLowerCase","includes","map","AddContactForm","stateContacts","nameInputId","shortid","numberInputId","useState","contactName","setName","contactNumber","setNumber","handleChange","e","target","reset","onSubmit","preventDefault","find","alert","addContact","autoComplete","maxW","borderWidth","borderRadius","htmlFor","I","type","onChange","pattern","title","required","marginTop","size","filterContacts","placeholder","Contacts","useEffect","fetchContacts","Helmet","style","display","paddingLeft","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}